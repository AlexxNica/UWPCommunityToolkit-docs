<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Toolkit.Uwp.UI</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Toolkit.Uwp.UI.Converters.BoolToVisibilityConverter">
            <summary>
            This class converts a boolean value into a Visibility enumeration.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.Converters.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Convert a boolean value to visibility.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The type of the target property, as a type reference.</param>
            <param name="parameter">An optional parameter to be used to invert the converter logic.</param>
            <param name="language">The language of the conversion.</param>
            <returns>The value to be passed to the target dependency property.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.Converters.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Modifies the target data before passing it to the source object. This method is called only in TwoWay bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The type of the target property, as a type reference (System.Type for Microsoft .NET, a TypeName helper struct for Visual C++ component extensions (C++/CX)).</param>
            <param name="parameter">An optional parameter to be used to invert the converter logic.</param>
            <param name="language">The language of the conversion.</param>
            <returns>The value to be passed to the source object.</returns>
        </member>
        <member name="T:Microsoft.Toolkit.Uwp.UI.Converters.CollectionVisibilityConverter">
            <summary>
            This class converts a collection size to visibility.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.Converters.CollectionVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            This class return Visibility.Visible if the given collection is not empty or null.
            </summary>
            <param name="value">Collection to convert to Visibility.</param>
            <param name="targetType">The type of the target property, as a type reference.</param>
            <param name="parameter">An optional parameter to be used to invert the converter logic.</param>
            <param name="language">The language of the conversion.</param>
            <returns>Visibility.Visible if the collection is not null and not empty</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.Converters.CollectionVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The type of the target property, as a type reference (System.Type for Microsoft .NET, a TypeName helper struct for Visual C++ component extensions (C++/CX)).</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="language">The language of the conversion.</param>
            <returns>The value to be passed to the source object.</returns>
        </member>
        <member name="T:Microsoft.Toolkit.Uwp.UI.Converters.ConverterTools">
            <summary>
            Static class used to provide internal tools
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.Converters.ConverterTools.TryParseBool(System.Object)">
            <summary>
            Helper method to safely cast an object to a boolean
            </summary>
            <param name="parameter">Parameter to cast to a boolean</param>
            <returns>Bool value or false if cast failed</returns>
        </member>
        <member name="T:Microsoft.Toolkit.Uwp.UI.Converters.StringFormatConverter">
            <summary>
            This class provides a binding converter to display formatted strings
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.Converters.StringFormatConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Return the formatted string version of the source object.
            </summary>
            <param name="value">Object to transform to string.</param>
            <param name="targetType">The type of the target property, as a type reference</param>
            <param name="parameter">An optional parameter to be used in the string.Format method.</param>
            <param name="language">The language of the conversion (not used).</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.Converters.StringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The type of the target property, as a type reference (System.Type for Microsoft .NET, a TypeName helper struct for Visual C++ component extensions (C++/CX)).</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="language">The language of the conversion.</param>
            <returns>The value to be passed to the source object.</returns>
        </member>
        <member name="T:Microsoft.Toolkit.Uwp.UI.Converters.StringVisibilityConverter">
            <summary>
            This class converts a string value into a Visibility value (if the value is null or empty returns a collapsed value).
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.Converters.StringVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a string value into a Visibility value by testing if string is null or empty.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The type of the target property, as a type reference.</param>
            <param name="parameter">An optional parameter to invert the converter logic.</param>
            <param name="language">The language of the conversion.</param>
            <returns>Visibility value.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.Converters.StringVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The type of the target property, as a type reference (System.Type for Microsoft .NET, a TypeName helper struct for Visual C++ component extensions (C++/CX)).</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="language">The language of the conversion.</param>
            <returns>The value to be passed to the source object.</returns>
            <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
        </member>
        <member name="T:Microsoft.Toolkit.Uwp.UI.ImageCache">
            <summary>
            Provides methods and tools to cache images in a temporary local folder
            </summary>
        </member>
        <member name="P:Microsoft.Toolkit.Uwp.UI.ImageCache.CacheDuration">
            <summary>
            Gets or sets the life duration of every cache entry.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.ImageCache.ClearAsync(System.Nullable{System.TimeSpan})">
            <summary>
            call this method to clear the entire cache.
            </summary>
            <param name="duration">Use this parameter to define a timespan from now to select cache entries to delete.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.ImageCache.GetFromCacheAsync(System.Uri)">
            <summary>
            Load a specific image from the cache. If the image is not in the cache, ImageCache will try to download and store it.
            </summary>
            <param name="uri">Uri of the image.</param>
            <returns>a BitmapImage</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.ImageCache.GetCacheFileName(System.Uri)">
            <summary>
            Gets the local cache file name associated with a specified Uri.
            </summary>
            <param name="uri">Uri of the resource.</param>
            <returns>Filename associated with the Uri.</returns>
        </member>
        <member name="T:Microsoft.Toolkit.Uwp.UI.VisualTreeExtensions">
            <summary>
            Defines a collection of extensions methods for UI.
            </summary>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.VisualTreeExtensions.FindDescendantByName(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            Find descendant control using its name.
            </summary>
            <param name="element">Parent element.</param>
            <param name="name">Name of the control to find</param>
            <returns>Descendant control or null if not found.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.VisualTreeExtensions.FindDescendant``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Find first descendant control of a specified type.
            </summary>
            <typeparam name="tType">Type to search for.</typeparam>
            <param name="element">Parent element.</param>
            <returns>Descendant control or null if not found.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.VisualTreeExtensions.FindAscendant``1(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Find first ascendant control of a specified type.
            </summary>
            <typeparam name="tType">Type to search for.</typeparam>
            <param name="element">Child element.</param>
            <returns>Ascendant control or null if not found.</returns>
        </member>
        <member name="M:Microsoft.Toolkit.Uwp.UI.VisualTreeExtensions.FindVisualAscendant``1(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Find first visual ascendant control of a specified type.
            </summary>
            <typeparam name="tType">Type to search for.</typeparam>
            <param name="element">Child element.</param>
            <returns>Ascendant control or null if not found.</returns>
        </member>
    </members>
</doc>
